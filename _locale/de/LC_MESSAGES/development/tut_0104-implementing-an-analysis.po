# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-, The section authors, The jamovi Group, and Sebastian
# Jentschke (curating this documentation). This work is licensed under a
# Creative Commons Attribution-Non Commercial 4.0 International License.
# This file is distributed under the same license as the jamovi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  jamovi\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-31 17:16+0200\n"
"PO-Revision-Date: 2020-07-20 23:22+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: German (https://www.transifex.com/jamovi/teams/111618/de/)"
"\n"
"Plural-Forms: nplurals=2; plural=(n != 1)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../development/tut_0104-implementing-an-analysis.rst:5
msgid "Implementing an analysis"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:7
msgid ""
"In this section we will add the implementation, that is the R code, to "
"perform our t-test analysis."
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:10
msgid ""
"In jamovi analyses, the implementation lives in the ``.b.R`` file, so if "
"we look in our ``ttest.b.R`` file we see:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:31
msgid ""
"This is another file that our call to ``jmvtools::create()`` created. Now"
" this may appear unfamiliar, and might not look like most of the R code "
"you've written, but that's OK, you don't really need to know what's going"
" on here. What *is* going on here is that the analysis is represented by "
"an R6 class. For the curious, you can read more about R6 classes `here "
"<https://cran.r-project.org/web/packages/R6/vignettes/Introduction.html>`__,"
" but all you really need to know is that you write your analysis in the "
"``.run`` function, and you can safely ignore the rest."
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:40
msgid ""
"You'll also notice that the `.run()` function receives no arguments. We "
"access the values that the user specified (either in the jamovi ui, or as"
" arguments to the generated `ttestIS()` function) through `self`. Again, "
"this may seem a little unfamiliar, but it is very straight forward."
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:45
msgid ""
"As covered in the `previous section <tut_0103-creating-an-"
"analysis.html>`__, our t-test has four options (as defined in "
"`ttest.a.yaml`), `dep`, `group`, `alt` and `varEq`, we can access the "
"values for each of these in our analysis with:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:49
msgid "``self$options$dep``"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:50
msgid "``self$options$group``"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:51
msgid "``self$options$alt``"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:52
msgid "``self$options$varEq``"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:54
msgid ""
"Additionally, `ttest.a.yaml` defined the special `data` option, which "
"means we can access the data provided by the user as a data frame (either"
" the data loaded in jamovi, or the data passed as an argument to "
"`ttestIS()` function in R), with:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:62
msgid ""
"Now we have access to the options, and access to the data, we can begin "
"writing our analysis as follows:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:81
msgid ""
"First, we take the values of `self$options$dep` and `self$options$group`,"
" which are both strings and assemble them into a formula. Then we can "
"call the `t.test()` function passing in this formula, and the `self$data`"
" data frame. Finally, we print the result."
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:85
msgid ""
"Now this analysis will and does work; however when running in jamovi, the"
" result of the print statement will appear at the terminal, rather than "
"in the application's results area (where the user would like it). To "
"remedy this, rather than simply printing the results, we assign the "
"results to the analysis' results object. When run in an R session, the "
"results will still be printed, but when run in jamovi, the results will "
"appear in the results panel. We assign to the analysis' result object "
"using (you guessed it), `self$results`. Our new function will now read:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:109
msgid ""
"In this new function, we get the results element called ``text`` from "
"``self$results``, and call ``setContent()`` with the results from the "
"t-test. We’ll cover results elements in greater depth in the next "
"section, but for now this is all you need to know."
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:114
msgid ""
"So now our analysis is implemented, it’s time to install it and try it "
"out. Install the module with the usual:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:121
msgid ""
"Now open the ``Tooth Growth`` data set from the jamovi examples (File → "
"Examples → Tooth Growth). Assign the ``len`` column to the ``Dependent "
"Variable``, and the ``supp`` column to the ``Grouping Variable``. You "
"should have something like the following:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:128
msgid ""
"Similarly, we can install this module as an R package using the "
"``devtools`` package (not to be confused with ``jmvtools``), and run the "
"same analysis in an interactive R session:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:154
msgid ""
"Before we continue, astute readers will have realised that assembling our"
" formula with ``paste`` is problematic. If either column name has spaces "
"or special characters, paste will produce a bad formula. For example, if "
"the user specified a dependent variable called ``the fish`` — the "
"resultant formula would be ``the fish~group``, and the call to "
"``as.formula()`` would fail:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:170
msgid ""
"The names of the columns making up the formula need to be escaped, or "
"quoted. Fortunately, ``jmvcore`` provides the function "
"``constructFormula()``, which assembles simple formulas appropriately "
"escaping column names:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:180
msgid "We can modify our analysis to use this instead:"
msgstr ""

#: ../../development/tut_0104-implementing-an-analysis.rst:198
msgid ""
"The ``jmvcore`` package contains many such useful functions. It would be "
"worth checking them out."
msgstr ""

#~ msgid ""
#~ "Now open the ``Tooth Growth`` data "
#~ "set from the jamovi examples (File "
#~ "-> Examples -> Tooth Growth). Assign "
#~ "the ``len`` column to the ``Dependent"
#~ " Variable``, and the ``supp`` column "
#~ "to the ``Grouping Variable``. You should"
#~ " have something like the following:"
#~ msgstr ""

