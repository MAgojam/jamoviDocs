# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020-, The section authors, The jamovi Group, and Sebastian
# Jentschke (curating this documentation). This work is licensed under a
# Creative Commons Attribution-Non Commercial 4.0 International License.
# This file is distributed under the same license as the jamovi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version:  jamovi\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-07-31 14:58+0200\n"
"PO-Revision-Date: 2020-07-20 23:23+0000\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ko\n"
"Language-Team: Korean (https://www.transifex.com/jamovi/teams/111618/ko/)"
"\n"
"Plural-Forms: nplurals=1; plural=0\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../development/ui_basic-design.rst:5
msgid "Basic UI Design"
msgstr ""

#: ../../development/ui_basic-design.rst:7
msgid ""
"UIs for jamovi analyses are defined in the .u.yaml file (a refresher on "
"the files and the relationship between them is described `here <tut_0103"
"-creating-an-analysis.html>`__). This describes what sort of control each"
" option is represented by (i.e. a dropdown list, or some radio buttons), "
"and the order and the layout in which they will appear."
msgstr ""

#: ../../development/ui_basic-design.rst:14
msgid "``aggressive`` vs ``tame`` compiler mode"
msgstr ""

#: ../../development/ui_basic-design.rst:16
msgid ""
"By default, .u.yaml files are in ``aggressive`` compiler mode. This means"
" when installing jamovi modules with ``jmvtools::install()`` the .u.yaml "
"files are regenerated and replaced each time. This is good early on in "
"the development process, but as development progresses, getting a UI "
"*just right* or adding custom behaviour requires hand editing of the "
".u.yaml files. To prevent jmvtools from simply replacing all your "
"changes, the .u.yaml file can be placed in ``tame`` mode. In ``tame`` "
"mode the compiler respects your changes, and will not interfere with your"
" adjustments. The trade-off is that the compiler often can’t insert new "
"controls into the UI as optimally."
msgstr ""

#: ../../development/ui_basic-design.rst:27
msgid ""
"To begin with we’d encourage you to leave your .u.yaml files in "
"``aggressive`` mode."
msgstr ""

#: ../../development/ui_basic-design.rst:31
msgid "Controls"
msgstr ""

#: ../../development/ui_basic-design.rst:33
msgid ""
"As we’ve seen earlier in this tutorial series with our t-test example, "
"each option is represented by one or more controls. Our list option was "
"represented by a list box, boolean options were represented by "
"checkboxes, and Variable options were represented as a box that variables"
" could be dragged to."
msgstr ""

#: ../../development/ui_basic-design.rst:39
msgid ""
"Let’s take a look at UI, and the ``.u.yaml`` file which is responsible "
"for it:"
msgstr ""

#: ../../development/ui_basic-design.rst:86
msgid ""
"As can be seen, controls are arranged in a hierarchy. At the very top is "
"a control of type ``VariableSupplier``. It has two children: ``deps`` of "
"type ``VariablesListBox`` and ``group`` of type ``VariableListBox``. "
"Together, these three controls create the variables list, and the "
"‘Dependent Variables’ and ‘Grouping Variable’ drop targets."
msgstr ""

#: ../../development/ui_basic-design.rst:92
msgid ""
"Next is a ``LayoutBox`` which contains the hypothesis ``ComboBox``, "
"followed by another ``LayoutBox`` containing the equality of variances "
"``CheckBox``. By default, items are laid out in a grid from top to "
"bottom."
msgstr ""

#: ../../development/ui_basic-design.rst:97
msgid "TODO: how to layout controls in other configurations, group headings, etc."
msgstr ""

#~ msgid "|example-ui|"
#~ msgstr ""

