# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, The section authors, The jamovi project, and Sebastian
# Jentschke (curating this documentation). This work is licensed under a
# Creative Commons Attribution-Non Commercial 4.0 International License.
# This file is distributed under the same license as the jamovi package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: jamovi \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-09 00:59+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../_pages/ui_checkbox.rst:5
msgid "``CheckBox``"
msgstr ""

#: ../../_pages/ui_checkbox.rst:7
msgid "**Inherits from** |ui_parentcontrol|_, |ui_optioncontrol|_"
msgstr ""

#: ../../_pages/ui_checkbox.rst:10
msgid "Properties"
msgstr ""

#: ../../_pages/ui_checkbox.rst:12
msgid ""
"There are no ``CheckBox`` specific properties. All behavior can be "
"achieved using the inherited properties of ``OptionControl`` and "
"``ParentControl``."
msgstr ""

#: ../../_pages/ui_checkbox.rst:17
msgid "Supported Option Types"
msgstr ""

#: ../../_pages/ui_checkbox.rst:19 ../../_pages/ui_checkbox.rst:23
msgid "``Bool``"
msgstr ""

#: ../../_pages/ui_checkbox.rst:20 ../../_pages/ui_checkbox.rst:65
msgid "``NMXList``"
msgstr ""

#: ../../_pages/ui_checkbox.rst:25
msgid ""
"When ``CheckBox`` is bound to a ``Bool`` option type the behavior is very"
" simple. When the option is ``TRUE``, the ``CheckBox`` is checked."
msgstr ""

#: ../../_pages/ui_checkbox.rst:28
msgid ""
"Below is an example of a simple ``Bool`` option and a ``CheckBox`` that "
"has been associated with it."
msgstr ""

#: ../../_pages/ui_checkbox.rst:31 ../../_pages/ui_checkbox.rst:79
msgid "*Option Definition*"
msgstr ""

#: ../../_pages/ui_checkbox.rst:43 ../../_pages/ui_checkbox.rst:116
msgid "*UI Control Definition*"
msgstr ""

#: ../../_pages/ui_checkbox.rst:50
msgid ""
"Note that the ``optionName`` property of the ``CheckBox`` is not "
"specified and therefore the *option binding* will use the ``name`` "
"property of the control for the binding process instead (see "
"`OptionControl <ui_optioncontrol.html>`__ for more details)."
msgstr ""

#: ../../_pages/ui_checkbox.rst:55
msgid ""
"There is also no need to specify the ``label`` property of this "
"``OptionControl`` as the ``title`` property of the option is adequate and"
" will be automatically used by the ``CheckBox``. This means that a "
"``CheckBox`` can be defined in two lines! If the ``title`` property of "
"the option is not appropriate for the control then a ``label`` property "
"can be added to the ``CheckBox`` to override it."
msgstr ""

#: ../../_pages/ui_checkbox.rst:67
msgid ""
"When ``CheckBox`` is bound to an ``NMXList`` a few more properties are "
"needed for it to work."
msgstr ""

#: ../../_pages/ui_checkbox.rst:70
msgid ""
"The below example shows an option with the name ``effectSize``. This "
"option has a property called ``options`` which describes three non-"
"mutually exclusive sub-options that are possible within the options "
"output. An ``NMXList`` returns an array of one or all of these sub-"
"options."
msgstr ""

#: ../../_pages/ui_checkbox.rst:76
msgid ""
"Now a ``CheckBox`` can be used to manipulate an ‘NMXList’ option by "
"adding or removing a specified sub-option from the underlying array."
msgstr ""

#: ../../_pages/ui_checkbox.rst:94
msgid ""
"To achieve this two properties will need to be added to the ``CheckBox`` "
"definition: ``optionName`` and ``optionPart``. Both these properties are "
"inherited from ```OptionControl`` <ui_optioncontrol.html>`__. As has been"
" described in ``OptionControl`` documentation, ``optionName`` is used to "
"determine what option the ``CheckBox`` should bind to. Under normal "
"circumstances, it is not necessary to use ``optionName`` as the property "
"``name`` can be used for the same effect. This however, becomes a problem"
" for defining a ``CheckBox`` that is linked to an ``NMXList`` as the "
"``name`` property also has a requirement to be unique across all "
"controls. It is not allowed to have two checkboxes (or any other control "
"for that matter) with the same name. Because of this, when binding to an "
"``MNXList`` we are required to give the ``CheckBox`` a unique name and "
"use the ``optionName`` to bind to the desired ``NMXList``."
msgstr ""

#: ../../_pages/ui_checkbox.rst:108
msgid ""
"Now binding solely to an ``NMXList`` is not a valid configuration for a "
"``CheckBox`` as it requires a boolean data type to operate correctly. To "
"overcome this, the ``CheckBox`` definition will need to not *just* bind "
"to the ``NMXList`` but also to one of the sub-options. This is achieved "
"using the ``optionPart`` property. By assigning the name of the desired "
"sub-option to this property, the ``CheckBox`` will operate base on that "
"sub-options existence in the underlying array."
msgstr ""

#: ../../_pages/ui_checkbox.rst:135
msgid ""
"Three ``CheckBox``\\ ’s for the three sub-options of the option "
"``NMXList``."
msgstr ""

